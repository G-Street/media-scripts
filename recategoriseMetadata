#! /usr/local/bin/bash

# ensure you run:
# `pkg install bash python3 ffmpeg`

# MEDIA_DIR="/mnt/Primary/Media"
MEDIA_DIR="/mnt/Media/"
LOGFILE="${MEDIA_DIR}/Scripts/conversion.log"
ALBUM_LOG="${MEDIA_DIR}/Scripts/albums.log"
FAILED="${MEDIA_DIR}/Scripts/failed.log"

source "${MEDIA_DIR}/Scripts/scriptlets/helpCommands"
source "${MEDIA_DIR}/Scripts/scriptlets/optionErrors"
source "${MEDIA_DIR}/Scripts/scriptlets/jsonColourParser"


display_help() {
    help_start 'recategoriseMetadata [-h | -c <all|some> | -l <path/to/film> | -(n|N) <collection title>]' 'The present script will, by default (i.e., with no options), find all films that exist in subdirectories with a unified parent subdirectory under Movies/, and add an album tag to then so that Plex will recognise them as a category.'
    help_commands '-c' '--collections' '1' 'Prints all' 'c' 'ollections' 'to standard output.'
    help_commands '-d' '--data' '2' 'Creates the' 'd' 'ata' '\bsheet that main() uses (found at /tmp/categorisingFilms/categories.csv).'
    help_commands '-l' '--label' '2' 'Prints the album' 'l' 'abel' 'of an input film.'
    help_commands '-n' '--name' '2' 'Finds collections by input' 'n' 'ame' 'using the metadata collated by `ffmpeg`.'
    help_commands '-N' '--Name' '2' 'Finds collections by input' 'N' 'ame' 'based on the file structure of the Movies directory.'
    help_help '2'
    help_examples 'Running `/mnt/Media/Scripts/recategoriseMetadata -c all` will print all categories.'
    help_examples 'Running `/mnt/Media/Scripts/recategoriseMetadata -c some` will print categories that are incorrectly labelled.'
}


dirHasFiles() {
    dir=${1:-.}
    
    for f in "${dir}"/* "${dir}"/.[!.]* "${dir}"/..?*
    do
        [ -d "${f}" ] && continue
        [ -e "${f}" ] && return 0
    done
    
    return 1
}


getAlbumName() {
    /usr/local/bin/ffprobe -loglevel quiet -show_format "${1}" | awk -F'=' 'tolower($0) ~ /album/ {print $2}' # tolower required for case insensitive search
}


getLabel() {
    # exit if no option passed
    if [[ -z "${1}" ]]
    then
        opt_err_none
        exit $?
    fi
    
    local ALBUM_NAME
    
    ALBUM_NAME="$(/usr/local/bin/ffprobe -loglevel quiet -show_format "${1}" | awk -F'=' 'tolower($0) ~ /album/ {print $2}')" # tolower required for case insensitive search
    
    if [[ -z "${ALBUM_NAME}" ]]
    then
        echo -e "${BWHITE}${1} has no album tag in its metadata.${NORM}"
    else
        echo -e "${BWHITE}${ALBUM_NAME}${NORM}"
    fi
}


findValidCategory() {
    [[ ! -d /tmp/categorisingFilms/ ]] && \
        mkdir -p /tmp/categorisingFilms/
    
    find $(cd "${MEDIA_DIR}/Movies/"; pwd) -type d -print |
    while IFS= read -r directory
    do
        RAW_CATEGORY_NAME="$(basename -- "$(dirname -- "${directory}")")"
        CATEGORY_NAME="$(echo "${RAW_CATEGORY_NAME}" | sed 's/[[:space:]]-[[:space:]]/: /g')"
        
        # check that the found directory a) has files in it;
        # b) has a parent that doesn not have files in it;
        # c) has a parent whose name is not "Movies";
        # and d) has a parent whose name is not "Media"
        if dirHasFiles "${directory}" && ! dirHasFiles "${directory}/.." && [[ "${CATEGORY_NAME}" != "Movies" ]] && [[ "${CATEGORY_NAME}" != "Media" ]]
        then
            
            PATH_NAME="$(readlink -f "${directory}/..")" # readlink required to expand ..
            printf "${CATEGORY_NAME}\t${PATH_NAME}/\n" # using tab in case names have commas in them
        fi
    done | sort | uniq > /tmp/categorisingFilms/categories.csv
}


findCollections() {
    # exit if no option passed
    if [[ -z "${1}" ]]
    then
        opt_err_none
        exit $?
    fi
    
    if [[ "${1}" == "all" ]] || [[ "${1}" == "some" ]]
    then
        :
    else
        echo -e "${BYELLOW}\"${1}\" is not a valid argument for this option.  Use -h for help.${NORM}"
        exit $?
    fi

    findValidCategory
    
    local COLLECTION_TAGS_UP_TO_DATE
    local WANTS_SOME
    COLLECTION_TAGS_UP_TO_DATE=true
    WANTS_SOME=false

    while IFS=$'\t' read -r ALBUM_NAME collectionPath # col1 col2
    do
        find "${collectionPath}" -type f \( -iname \*.mkv -o -iname \*.avi -o -iname \*.mp4 \) -print | \
        while IFS= read -r film; do
            RAW_FILE_NAME="$(basename -- "${film}")"
            EXT="${RAW_FILE_NAME##*.}"
        
            OLD_ALBUM_NAME="$(getAlbumName "${film}")"
        
            if [[ "${1}" == "all" ]]
            then
                echo -e "Collection element found at ${ITWHITE}${RAW_FILE_NAME}${NORM} with album tag ${BWHITE}\"${OLD_ALBUM_NAME}\"${NORM}."
            elif [[ "${1}" == "some" ]]
            then
                # only convert album name if not already what we desire
                if [[ "${OLD_ALBUM_NAME}" == "${ALBUM_NAME}" ]]
                then
                    :
                else
                    COLLECTION_TAGS_UP_TO_DATE=false
                    WANTS_SOME=true
                    echo -e "Possible collection element found at ${ITWHITE}${RAW_FILE_NAME}${NORM}: Album tag ${BWHITE}\"${OLD_ALBUM_NAME}\"${NORM} to be changed to ${BWHITE}\"${ALBUM_NAME}\"${NORM}."
                fi
            else
                echo -e "${BRED}Somehow, you gave this script an argument that was not allowed but the script didn't pick that up until now.  Are you a wizard?  (See -h for help).${NORM}"
            fi
        done
    done < /tmp/categorisingFilms/categories.csv
    
    if [[ $COLLECTION_TAGS_UP_TO_DATE == true ]] && [[ $WANTS_SOME == true ]]
    then
        echo -e "${BWHITE}It seems that all films in file-system collections have been labelled appropriately.  You can check the album label of an individual film using \`${NORM}${ITWHITE}${0} -l <path/to/film>${NORM}${BWHITE}\`, or use \`${NORM}${ITWHITE}/mnt/Media/Scripts/seeMetadata </path/to/film>${NORM}${BWHITE}\` to see all.  If Plex is still misbehaving after you have refreshed all metadata, it is likely that it is only misbehaving for a select few films; consider adding these films to collections manually by hovering over the film, clicking the pencil in the bottom right corner, click on the \"Tags\" tab, and edit the collection tab.${NORM}"
    fi
}


findCollectionFromFileSystem() {
    # exit if no option passed
    if [[ -z "${1}" ]]
    then
        opt_err_none
        exit $?
    fi
    
    findValidCategory

    while IFS=$'\t' read -r ALBUM_NAME collectionPath # col1 col2 # simply reads from valid categories found in file system
    do
        INPUT_COLLECTION="$(echo "${1}" | tr '[:upper:]' '[:lower:]')"
        LOWERCASE_ALBUM_NAME="$(echo "${ALBUM_NAME}" | tr '[:upper:]' '[:lower:]')"
        
        if [[ "${INPUT_COLLECTION}" == "${LOWERCASE_ALBUM_NAME}" ]]
        then
            
            find "${collectionPath}" -type f \( -iname \*.mkv -o -iname \*.avi -o -iname \*.mp4 \) -print | \
            while IFS= read -r film; do
                RAW_FILE_NAME="$(basename -- "${film}")"
                FILE_NAME="${RAW_FILE_NAME%%*.}"
                
                echo "${FILE_NAME}"
            done
        fi
    done < /tmp/categorisingFilms/categories.csv | sort | uniq
}


findCollectionFromFfmpeg() {
    # exit if no option passed
    if [[ -z "${1}" ]]
    then
        opt_err_none
        exit $?
    fi
    
    findValidCategory

    while IFS=$'\t' read -r ALBUM_NAME collectionPath # col1 col2
    do
        find "${collectionPath}" -type f \( -iname \*.mkv -o -iname \*.avi -o -iname \*.mp4 \) -print | \
        while IFS= read -r film; do
            INPUT_COLLECTION="$(echo "${1}" | tr '[:upper:]' '[:lower:]')"
            CURRENT_ALBUM_NAME="$(getAlbumName "${film}")" # uses ffmpeg
            LOWERCASE_ALBUM_NAME="$(echo "${CURRENT_ALBUM_NAME}" | tr '[:upper:]' '[:lower:]')"
            
            if [[ "${INPUT_COLLECTION}" == "${LOWERCASE_ALBUM_NAME}" ]]
            then
                RAW_FILE_NAME="$(basename -- "${film}")"
                FILE_NAME="${RAW_FILE_NAME%%*.}"
                
                echo "${FILE_NAME}"
            fi
        done
    done < /tmp/categorisingFilms/categories.csv | sort | uniq
}


main() {
    start=$(python3 -c 'import time; print(time.time())')
    
    findValidCategory
    
    truncate -s0 "${LOGFILE}"
    truncate -s0 "${ALBUM_LOG}"
    truncate -s0 "${FAILED}"

    while IFS=$'\t' read -r ALBUM_NAME collectionPath # col1 col2
    do
        find "${collectionPath}" -type f \( -iname \*.mkv -o -iname \*.avi -o -iname \*.mp4 \) -print | \
        while IFS= read -r film; do
            RAW_FILE_NAME="$(basename -- "${film}")"
            EXT="${RAW_FILE_NAME##*.}"
        
            OLD_ALBUM_NAME="$(getAlbumName "${film}")"
        
            # only convert album name if not already what we desire
            if [[ "${OLD_ALBUM_NAME}" == "${ALBUM_NAME}" ]]
            then
                :
            else
        
                TEMP_NAME="${film}.album.${EXT}"
        
                # add album name to new temp file
                < /dev/null ffmpeg -nostdin -y -i "${film}" -codec copy -metadata album="${ALBUM_NAME}" "${TEMP_NAME}" 2>> "${LOGFILE}"
        
                # rename temp file to other file and remove old
                if [[ -f "${TEMP_NAME}" ]]; then
                    rm "${film}" && mv "${TEMP_NAME}" "${film}"
                else
                    echo "Failed to edit the metadata of ${film}.  Wade through ${LOGFILE} for details." >> "${FAILED}"
                fi
        
                # print new album name to log file
                NEW_ALBUM_NAME="$(getAlbumName "${film}")"
                
                echo "Converted ${RAW_FILE_NAME}: Album tag \"${OLD_ALBUM_NAME}\" changed to \"${NEW_ALBUM_NAME}\"." >> "${ALBUM_LOG}"
        
            fi
        done
    done < /tmp/categorisingFilms/categories.csv
    
    end=$(python3 -c 'import time; print(time.time())')
    runtime=$(echo "( $end - $start ) / 60" | bc -l )
    
    echo "++++++ FINISHED CONVERSIONS in ${runtime} minutes at $(date) ++++++" >> "${LOGFILE}"
}


OPTIND=1
while getopts ":-:hclNdn" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        data)
                            findValidCategory
                            echo -e "${BWHITE}Created datasheet at /tmp/categorisingFilms/categories.csv:${NORM}"
                            cat /tmp/categorisingFilms/categories.csv ;;
                        Name)
                            findCollectionFromFileSystem "${2}" ;;
                        name)
                            findCollectionFromFfmpeg "${2}" ;;
                        label)
                            getLabel "${2}" ;;
                        collections)
                            findCollections "${2}" ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                d)
                    findValidCategory
                    echo -e "${BWHITE}Created datasheet at /tmp/categorisingFilms/categories.csv:${NORM}"
                    cat /tmp/categorisingFilms/categories.csv ;;
                N)
                    findCollectionFromFileSystem "${2}" ;;
                n)
                    findCollectionFromFfmpeg "${2}" ;;
                l)
                    getLabel "${2}" ;;
                c)
                    findCollections "${2}" ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


if [[ "${1}" =~ ^\-.+ ]] # checks to see if first argument begins with a minus (i.e., is an option) as we cannot assess $OPTIND before options are called
then
    :
else
    main
fi

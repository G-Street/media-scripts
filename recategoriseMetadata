#! /usr/local/bin/bash

# ensure you run:
# `pkg install bash python3 ffmpeg`

#MEDIA_DIR="/mnt/Primary/Media"
MEDIA_DIR="/mnt/Media/"
LOGFILE="${MEDIA_DIR}/Scripts/conversion.log"
ALBUM_LOG="${MEDIA_DIR}/Scripts/albums.log"
FAILED="${MEDIA_DIR}/Scripts/failed.log"

source "${MEDIA_DIR}/Scripts/scriptlets/helpCommands"
source "${MEDIA_DIR}/Scripts/scriptlets/optionErrors"
source "${MEDIA_DIR}/Scripts/scriptlets/jsonColourParser"

display_help() {
    
    help_start 'recategoriseMetadata [-h]' 'The present script will find all films that exist in subdirectories with a unified parent subdirectory under Movies/, and add an album tag to then so that Plex will recognise them as a category.'
    help_help '2'
    
}

getAlbumName() {
    
    /usr/local/bin/ffprobe -loglevel quiet -show_format "${1}" | awk -F'=' '/album/ {print $2}'
    
}

main() {
    
    start=$(python3 -c 'import time; print(time.time())')
    
    ALBUM_NAME="Saw"

    truncate -s0 "${LOGFILE}"
    truncate -s0 "${ALBUM_LOG}"
    truncate -s0 "${FAILED}"

    find . -type f -print | \
    while IFS= read -r film; do
        if [[ ! ${film} =~ ^.*\.srt$ ]]; then
            
            # test
            # echo "${film}" | awk -F'/' '{print $NF}'
            
            # if metadata not equal to album_name?
            
            # define variables
            RAW_FILE_NAME="$(echo "${film}" | awk -F'/' '{print $NF}')"
            OLD_ALBUM_NAME="$(getAlbumName "${film}")"
            EXT="$(echo "${film}" | awk -F'.' '{print $NF}')"
            TEMP_NAME="${film}.album.${EXT}"
            
            sleep 5
            
            # add album name to new temp file
            ffmpeg -loglevel quiet -i "${film}" -codec copy -metadata album="${ALBUM_NAME}" "${TEMP_NAME}" 2>> "${LOGFILE}"
            
            sleep 5
            
            # rename temp file to other file and remove old
            if [[ -f "${TEMP_NAME}" ]]; then
                rm "${film}" && mv "${TEMP_NAME}" "${film}"
            else
                echo "Failed to edit the metadata of ${film}." >> "${FAILED}"
            fi
            
            # print new album name to log file
            NEW_ALBUM_NAME="$(getAlbumName "${film}")"
            echo "Converted ${RAW_FILE_NAME}: Album tag \"${OLD_ALBUM_NAME}\" changed to \"${NEW_ALBUM_NAME}\"." >> "${ALBUM_LOG}"
            
            sleep 5
            
        fi
    done
    
    end=$(python3 -c 'import time; print(time.time())')
    runtime=$(echo "( $end - $start ) / 60" | bc -l )

    echo "++++++ FINISHED CONVERSIONS in $runtime minutes at $(date) ++++++" >> "${LOGFILE}"
    
}


OPTIND=1
while getopts ":-:h" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


if [[ "${1}" =~ ^\-.+ ]] # checks to see if first argument begins with a minus (i.e., is an option) as we cannot assess $OPTIND before options are called
then
    :
else
    main
fi
